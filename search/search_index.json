{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Conflux DEX Test Net TYPE URL COMMENT REST API http://18.144.41.39:8080/ Document WebSocket API ws://18.144.41.39:8080/ws Document","title":"Home"},{"location":"#welcome-to-conflux-dex","text":"","title":"Welcome to Conflux DEX"},{"location":"#test-net","text":"TYPE URL COMMENT REST API http://18.144.41.39:8080/ Document WebSocket API ws://18.144.41.39:8080/ws Document","title":"Test Net"},{"location":"rest/","text":"Conflux DEX REST API Please view the API document here .","title":"REST API"},{"location":"rest/#conflux-dex-rest-api","text":"Please view the API document here .","title":"Conflux DEX REST API"},{"location":"ws/","text":"Conflux-DEX Websocket API General Websocket URL ws://${conflux_dex_url}/ws Heartbeat and Connection Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed. Subscribe to Topic To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics. Unsubscribe To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false } Topic Response Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic. Market Data Best Bid/Offer Topic market.$product.bbo Update Content public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; } Market Depth Topic market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels. Update Content { \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; } Market Details in Last 24 Hours Topic market.$product.detail Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Market Tick Topic market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month. Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Trade Detail Topic market.$product.trade.detail Update Content public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status; /** * Transaction hash of matching orders on blockchain. */ private String txHash; /** * Trade timestamp. */ private Timestamp createTime; } Asset and Order Account Updates Topic accounts Arguments address : user address. model : trigger mode in integer type. - 0: Only update when account balance changed; - 1: Update when either account balance changed or available balance changed. Update Content public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\" and \"Withdraw\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; } Order Updates Topic order.$product $product : product name or * for all products. Arguments address : user address. Update Content public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order type changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; } Trade Details Topic trade.$product $product : product name or * for all products. Arguments address : user address. Update Content public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"WebSocket API"},{"location":"ws/#conflux-dex-websocket-api","text":"","title":"Conflux-DEX Websocket API"},{"location":"ws/#general","text":"","title":"General"},{"location":"ws/#websocket-url","text":"ws://${conflux_dex_url}/ws","title":"Websocket URL"},{"location":"ws/#heartbeat-and-connection","text":"Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed.","title":"Heartbeat and Connection"},{"location":"ws/#subscribe-to-topic","text":"To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics.","title":"Subscribe to Topic"},{"location":"ws/#unsubscribe","text":"To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false }","title":"Unsubscribe"},{"location":"ws/#topic-response","text":"Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic.","title":"Topic Response"},{"location":"ws/#market-data","text":"","title":"Market Data"},{"location":"ws/#best-bidoffer","text":"","title":"Best Bid/Offer"},{"location":"ws/#topic","text":"market.$product.bbo","title":"Topic"},{"location":"ws/#update-content","text":"public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; }","title":"Update Content"},{"location":"ws/#market-depth","text":"","title":"Market Depth"},{"location":"ws/#topic_1","text":"market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels.","title":"Topic"},{"location":"ws/#update-content_1","text":"{ \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; }","title":"Update Content"},{"location":"ws/#market-details-in-last-24-hours","text":"","title":"Market Details in Last 24 Hours"},{"location":"ws/#topic_2","text":"market.$product.detail","title":"Topic"},{"location":"ws/#update-content_2","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"ws/#market-tick","text":"","title":"Market Tick"},{"location":"ws/#topic_3","text":"market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month.","title":"Topic"},{"location":"ws/#update-content_3","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"ws/#trade-detail","text":"","title":"Trade Detail"},{"location":"ws/#topic_4","text":"market.$product.trade.detail","title":"Topic"},{"location":"ws/#update-content_4","text":"public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status; /** * Transaction hash of matching orders on blockchain. */ private String txHash; /** * Trade timestamp. */ private Timestamp createTime; }","title":"Update Content"},{"location":"ws/#asset-and-order","text":"","title":"Asset and Order"},{"location":"ws/#account-updates","text":"","title":"Account Updates"},{"location":"ws/#topic_5","text":"accounts","title":"Topic"},{"location":"ws/#arguments","text":"address : user address. model : trigger mode in integer type. - 0: Only update when account balance changed; - 1: Update when either account balance changed or available balance changed.","title":"Arguments"},{"location":"ws/#update-content_5","text":"public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\" and \"Withdraw\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; }","title":"Update Content"},{"location":"ws/#order-updates","text":"","title":"Order Updates"},{"location":"ws/#topic_6","text":"order.$product $product : product name or * for all products.","title":"Topic"},{"location":"ws/#arguments_1","text":"address : user address.","title":"Arguments"},{"location":"ws/#update-content_6","text":"public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order type changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; }","title":"Update Content"},{"location":"ws/#trade-details","text":"","title":"Trade Details"},{"location":"ws/#topic_7","text":"trade.$product $product : product name or * for all products.","title":"Topic"},{"location":"ws/#arguments_2","text":"address : user address.","title":"Arguments"},{"location":"ws/#update-content_7","text":"public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"Update Content"}]}